#+TITLE: Dynamic graphs in emacs

[[https://melpa.org/#/dynamic-graphs][https://melpa.org/packages/dynamic-graphs-badge.svg]]

* Motivations
While it takes only few lines to make a graph in graph file language,
it takes more effort to make it visually aligned with the rest of its
presentation.

For me, the best way is to separate graph definition in a .gv file
from definition of fonts, colors etc that can be kept in a .gvpr
file that can be used as a style file.

Second motivations are big graphs. Graphviz does nice job of
presenting them as whole, but in many case I want to be able to zoom
near some particular node (original motivation was displaying close
nodes in linked org files).

* What this package does
Make dynamic graphs: take a graph, apply some filters, and display
it as an image. The graph can be either a function that inserts the
graph (and is called for each redisplay), or a buffer that can
change. An imap file is created in addition to the image so that
clicks on image can be related to individual nodes (TODO: only for
rectangles so far)

* Filters
The filters can apply both enhancing operations (add colors, ...)
and more complicated operations coded in gvpr. As a special case
there is a filter that removes all nodes that are more distant than
a parameter from a root node.

See docstring for ~dynamic-graphs-filters~ for details about filters

* Key bindings
The image is displayed with a specialized minor mode.
Predefined key bindings on the displayed image in this mode include:
- e (dynamic-graphs-set-engine) change grahviz engine (dot, circo, ...)
- c (dynamic-graphs-remove-cycles) change whether cycles are removed
- 1-9 (dynamic-graphs-zoom-by-key) set maximum displayed distance from a root node
- mouse-1 (dynamic-graphs-shift-focus-or-follow-link) shift root node
  or follow link defined in imap file - that is, in URL attribute of
  the node.  Link is followed by customizable function, by default
  `browse-url' - but `org-link-open-from-string' might be more
  useful. See docstring for details.
- ! saves current graph in a .gv file.
- p saves current graph n pdf format.
- / clears root.

* Examples
** From function
Run
 #+begin_src elisp
 (dynamic-graphs-display-graph "test" nil
		    (lambda ()
		      (insert "digraph Gr {A [URL=\"http://example.com\"] A -> B -> C -> A ->E->F->G}"))
		    '(2 "N {style=\"filled, rounded\",fillcolor=\"green\"}"
                       node-refs boxize default))
 #+end_src

and you will get an image with the full graph:
[[./images/full.png]]

Click on "A" box to open the example.com website from url.

Press `e n' to switch to neato engine:

[[./images/neato.png]]

Click over box F to show it and nodes connected to it (radius 2
as in the filter list above). The ~default~ filter causes the root node
to be highlighter in yellow.


[[./images/F-around.png]]

Press 3 to increase radius for displayed nodes and display node A as
well:

[[./images/f-and-one.png]]
** From gv file/buffer
See .gv and .gvpr file in examples subdirectory:
- running ~dynamic-graphs-display-graph-buffer~ in the example.gv buffer displays the graph
- if you accepted the local variables, the style in style.gvpr is
  applied and single click leads changes root
- local variables can be set do define filters, root, etc

** From image and imap
If you open a png file that has an imap file with same base name in
the same directory and turn on the ~dynamic-graphs-graph-mode~, the
clicks on nodes with corresponding record in the imap file are
interpreted by ~browse-url~ command (or, in general, by current
~dynamic-graphs-follow-link-fn~) and the link is open

You can try it on example.png in the examples directory; clicking to A
or B should lead you to example web page or this repo on github.

** Call graph
Following function can prepare and display clickable call graph of an
emacs lisp file.

#+begin_src emacs-lisp :lexical t :results none
  (defun call-graph-file ()
    (interactive)
    (let ((byte-compile-generate-call-tree t)
	  (base (file-name-base (buffer-file-name))))
	  (save-window-excursion
	    (byte-compile-file (buffer-file-name)))
      (dynamic-graphs-display-graph "callers" nil
				    (lambda ()
				      (insert "digraph calls {\n")
				      (cl-flet ((d-t-p (var)
						       (equal (cl-mismatch (symbol-name var) base) (length base)))
						(shorten (var)
							 (concat ":" (substring (symbol-name var) (1+ (length base))))))
					(dolist (item byte-compile-call-tree)
					  (when (d-t-p (car item))
					    (insert (format "%S [command=%S, label=%S]\n"
							    (symbol-name (car item))
							    (commandp (car item))
							    (shorten (car item))))
					    (dolist (calls (nth 2 item))
					      (when (d-t-p calls)
						(insert (format "\"%s\" -> \"%s\"\n"
								(symbol-name (car item))
								calls)))))))
				      (insert "}\n"))
				    '(default boxize "N [command==\"t\"]{style=\"filled\"} N {URL=sprintf(\"help:%s\", name)} "))))
#+end_src

[[images/callers.png]]

** Call graph (again)
   :PROPERTIES:
   :ID:       e669ffc6-33b2-4739-939b-953e958cbc2c
   :END:

This is similar to the previous example, but a generic graph generating
function is factored out:
#+begin_src emacs-lisp :results none :lexical t
  (cl-defun dynamic-graphs-make-graph-from-list (name list filters &key params (name-fn #'car) (links-fn #'cadr) (props-fn #'cddr))
    (dynamic-graphs-display-graph name nil
				  (lambda ()
				    (insert (format "digraph %S {\n" name))
				    (dolist (par params)
				      (insert (format "%s=%S\n" (car par) (cdr par))))
				    (dolist (item list)
				      (let ((open ?\[ )
					    (name (funcall name-fn item))
					    (props (funcall props-fn item)))
					(insert (format "\n%S" name))
					(when props
					  (insert " ")
					  (dolist (prop props)
					    (insert (format "%c%s=%S" open (car prop) (cdr prop)))
					    (setq open ?,))
					  (insert "]"))
					(insert "\n")
					(dolist (link (funcall links-fn item))
					  (insert (format "\t%S -> %S\n" name link)))))
				    (insert "}\n"))
				  filters))
#+end_src

and more is done via gvpr filter.
#+begin_src emacs-lisp :display=none :lexical t :results none
  (defun call-graph-ii ()
    (interactive)
    (let ((byte-compile-generate-call-tree t)
	  (base (file-name-base (buffer-file-name))))
      (save-window-excursion
	(byte-compile-file (buffer-file-name)))
      (dynamic-graphs-make-graph-from-list base byte-compile-call-tree (list "call-graph.gvpr")
					   :params `((prefix . ,base))
					   :props-fn  (lambda (a) (list (cons 'command (commandp (car a)))))
					   :name-fn (lambda (a) (symbol-name (car a)))
					   :links-fn (lambda (a) (mapcar #'symbol-name (caddr a))))))
#+end_src

* Relation to other packages
There is a [[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]] package on Melpa that "helps you to
create .dot or .gv files containing syntax compatible with Graphviz
and use Graphviz to convert these files to diagrams".  This package
does not compete on this; it tries to take existing .gv files (or
buffers, or other, maybe large and generated sources) and visualize
them inside Emacs with some styling and with interactive features.

There is a [[https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el][gvpr-mode]] package for editing gvpr files on Melpa.

One can use built-in `image-mode' to view a gv file as an image
(processed by dot, and no clickable links).

* Some Known bugs
- The code to get URL from imap file works only for rectangles
- The code to get scale of image is too complicated and relies on
  undocumented, but I do not know how to do it better
- The code could use tests and then refactorization
- The way that the permament file local variables are used to maintain
  state between iterations does not seem satisfactory

* Tested on
- Windows 10 and graphviz 2.38 (old...)
- Fedora 33 and graphviz from repositories
